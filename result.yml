openapi: 3.0.0
info:
  title: MongoDB Data API
  description: "This collection is an introduction to the [MongoDB Data API](https://www.mongodb.com/data-api/l). The Data API provides you with a REST-like access to your data in [MongoDB Atlas](https://www.mongodb.com/atlas), the database-as-a-service offering by MongoDB.\n\nYou can find the full documentation on the MongoDB Data API on the [documentation website](https://docs.atlas.mongodb.com/api/data-api-resources/#data-api-resources).\n\n## Getting Started\n\nTo test out the MongoDB Data API collection, start by [creating a free MongoDB Atlas cluster](https://docs.atlas.mongodb.com/tutorial/deploy-free-tier-cluster/).\n\nOnce you have a cluster, you can [fork this collection](https://www.postman.com/mongodb-devrel/workspace/mongodb-public/collection/17898583-25682080-e247-4d25-8e5c-1798461c7db4/fork) into your own workspace so you'll be able to use it with your own variables.\n\nOnce you have a cluster up and running, [enable the Data API](https://docs.atlas.mongodb.com/api/data-api/#1.-enable-the-data-api).\n\nFrom the Atlas UI, copy the URL endpoint provided for the Data API, and paste the value in your URL_ENDPOINT collection variable.\n\nStill in the Atlas UI, create a new API key, copy the value and paste it in the API_KEY collection variable.\n\nWith the\_[EJSON format](https://www.mongodb.com/docs/atlas/api/data-api/#extended-json-responses), you can benefit from MongoDBâ€™s Extended JSON format, which preserves many data types that are normally not supported by JSON (such as ObjectID, Date, and more).\n\nFor writes, the {{CONTENT_TYPE}} variable is required and can be set to either\_`json`\_or\_`ejson`. This variable is used by Postman in the *Content-Type* header.\n\nFor reads, the Data API returns JSON by default, but can be changed to EJSON by setting the\_*Accept*\_header. You can set the {{CONTENT_TYPE}} variable to\_`json`\_or\_`ejson`\_to change the default behavior. Changing this variable will change the *Accept* header when Postman does a request to the Data API. The default content type returned by Atlas can also be changed in the Atlas Admin UI.\n\nFill in the other variables with the appropriate values for your cluster, database, and collection names.\n\nYou can now explore the various endpoints and see how to perform CRUD operations on your collection using the MongoDB Data API."
  version: 1.0.0
servers:
  - url: http://{{url_endpoint}}
paths:
  /action/insertOne:
    post:
      tags:
        - default
      summary: Insert Document
      description: >-
        Using the `/insertOne` endpoint, you can add a document to a collection.
        Use the `document` property in the request body to specify the document
        that should be created.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"document\": {\n        \"name\":
                \"John Sample\",\n        \"age\": 42\n      }\n  }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /action/findOne:
    post:
      tags:
        - default
      summary: Find Document
      description: "Using the\_`/findOne`\_endpoint will let you retrieve a single document from a collection. Use the\_`filter`\_property in the request body to specify the search criteria. If more than one document matches the criteria, only the first match will be returned."
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"filter\": { \"name\": \"John
                Sample\" }\n  }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
        - name: Accept
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /action/updateOne:
    post:
      tags:
        - default
      summary: Update Document
      description: >-
        You can use the `/updateOne` endpoint to update a single record. Use the
        `filter` property in the request body to specify the search criteria. If
        more than one document matches the criteria, only the first match will
        be returned. Then use the `update` field to specify what should be
        updated. You should use one of the [update
        operators](https://docs.mongodb.com/manual/reference/operator/update-field/)
        to update your documents.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"filter\": { \"name\": \"John
                Sample\" },\n      \"update\": { \"$set\": { \"age\": 24 } }\n 
                }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /action/deleteOne:
    post:
      tags:
        - default
      summary: Delete Document
      description: "To delete a single document, use the `/deleteOne` endpoint. Use the\_`filter`\_property in the request body to specify the search criteria. If more than one document matches the criteria, only the first match will be deleted."
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"filter\": { \"name\": \"John
                Sample\" }\n  }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /action/insertMany:
    post:
      tags:
        - default
      summary: Insert Multiple Documents
      description: >-
        You can add more than one document at a time by using the `/insertMany`
        endpoint. In that case, you must use the `documents` property in the
        body of the request to specify the array of documents you want to insert
        into the collection.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"documents\": [{\n        \"name\":
                \"John Sample\",\n        \"age\": 42\n      },{\n       
                \"name\": \"Mister Postman\",\n        \"age\": 37\n     
                },{\n        \"name\": \"Miss MongoDB\",\n        \"age\":
                35\n      }]\n  }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /action/find:
    post:
      tags:
        - default
      summary: Find Multiple Documents
      description: >-
        Using the `/find` endpoint, you can fetch multiple documents at once.
        Use the `filter` property in the body of the request to specify the
        criteria on which to filter. If you pass an empty object `{ }`, all the
        documents in the collection will be returned.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"filter\": { \"age\": { \"$lt\": 40
                } }\n  }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
        - name: Accept
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /action/updateMany:
    post:
      tags:
        - default
      summary: Update Multiple Documents
      description: "Using `/updateMany`, you can update all the documents matching a specific `filter` specified in the body of the request. Use one of the\_[update operators](https://docs.mongodb.com/manual/reference/operator/update-field/)\_in the `update` field to update your documents."
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"filter\": { \"age\": { \"$lt\": 40
                } },\n      \"update\": { \"$set\": { \"age\": 42 } }\n  }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /action/deleteMany:
    post:
      tags:
        - default
      summary: Delete Many Documents
      description: >-
        You can use `/deleteMany` to delete multiple documents at once. Use the
        `filter` property to specify which documents to delete.  
          
        **Warning**: Using `filter: { }` will delete all the documents in the
        collection. Use `/deleteMany` with care.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"filter\": { }\n  }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /action/aggregate:
    post:
      tags:
        - default
      summary: Run Aggregation Pipeline
      description: >-
        You can even run [aggregation
        pipelines](https://docs.mongodb.com/manual/core/aggregation-pipeline/)
        with the Data API. To do so, use the `/aggregate` endpoint and specify
        your pipeline in the `pipeline` field of the request body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n      \"dataSource\": \"{{DATA_SOURCE}}\",\n     
                \"database\": \"{{DATABASE}}\",\n      \"collection\":
                \"{{COLLECTION}}\",\n      \"pipeline\": [\n         
                {\n              \"$sort\": { \"age\": 1 }\n         
                },\n          {\n              \"$limit\": 1\n          }\n     
                ]\n  }"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
        - name: Access-Control-Request-Headers
          in: header
          schema:
            type: string
          example: '*'
        - name: api-key
          in: header
          schema:
            type: string
          example: '{{API_KEY}}'
        - name: Accept
          in: header
          schema:
            type: string
          example: application/{{CONTENT_TYPE}}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
